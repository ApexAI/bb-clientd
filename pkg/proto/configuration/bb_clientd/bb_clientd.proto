syntax = "proto3";

package buildbarn.configuration.bb_clientd;

import "google/protobuf/duration.proto";
import "pkg/proto/configuration/blobstore/blobstore.proto";
import "pkg/proto/configuration/builder/builder.proto";
import "pkg/proto/configuration/cas/cas.proto";
import "pkg/proto/configuration/filesystem/filesystem.proto";
import "pkg/proto/configuration/filesystem/virtual/virtual.proto";
import "pkg/proto/configuration/global/global.proto";
import "pkg/proto/configuration/grpc/grpc.proto";

option go_package = "github.com/buildbarn/bb-clientd/pkg/proto/configuration/bb_clientd";

message ApplicationConfiguration {
  // Content Addressable Storage (CAS) and Action Cache (AC) storage
  // configuration.
  buildbarn.configuration.blobstore.BlobstoreConfiguration blobstore = 1;

  // Maximum Protobuf message size to unmarshal.
  int64 maximum_message_size_bytes = 2;

  // The maximum size in bytes a Tree object may have for it to be
  // accessible through the virtual file system.
  int64 maximum_tree_size_bytes = 11;

  // Common configuration options that apply to all Buildbarn binaries.
  buildbarn.configuration.global.Configuration global = 3;

  // Mount of a virtual file system under which the contents of the
  // Content Addressable Storage (CAS) are exposed for reading. The
  // following pathname schemes are supported:
  //
  // - cas/${instance_name}/blobs/command/${hash}-${size_bytes}:
  //   An executable Bourne shell script that can be used to run the
  //   command locally.
  // - cas/${instance_name}/blobs/directory/${hash}-${size_bytes}/:
  //   View the contents of a Directory object.
  // - cas/${instance_name}/blobs/executable/${hash}-${size_bytes}:
  //   Access a single file, having the executable bit (+x) set.
  // - cas/${instance_name}/blobs/file/${hash}-${size_bytes}:
  //   Access a single file, having the executable bit (+x) clear.
  // - cas/${instance_name}/blobs/tree/${hash}-${size_bytes}/:
  //   View the contents of a Tree object.
  //
  // - outputs/${output_base}/:
  //   Location where Bazel may store the per-workspace bazel-out/
  //   directory. Files yielded by remote build actions are loaded
  //   lazily. Using this feature gives the same performance
  //   improvements as --remote_download_minimal, with the added
  //   advantage that remote output files remain accessible locally.
  //   More details: https://github.com/bazelbuild/bazel/pull/12823
  //
  // - scratch/:
  //   A writable directory where arbitrary path layouts may be
  //   constructed. Files that reference CAS objects may be created by
  //   hardlinking them from the "cas" directory.
  //
  // Instance names containing slashes are permitted. It automatically
  // causes intermediate directories to be created. "blobs" directories
  // exist at every level.
  buildbarn.configuration.filesystem.virtual.MountConfiguration mount = 4;

  // gRPC servers to spawn to listen for requests from clients.
  repeated buildbarn.configuration.grpc.ServerConfiguration grpc_servers = 5;

  // Map of schedulers available capable of running build actions, where
  // the key corresponds to the instance name prefix.
  map<string, buildbarn.configuration.builder.SchedulerConfiguration>
      schedulers = 6;

  // Location where files are stored that are created in the "outputs"
  // and "scratch" directories. Files that are hardlinked from the "cas"
  // directory don't take up any space in the file pool.
  buildbarn.configuration.filesystem.FilePoolConfiguration file_pool = 7;

  // When set, persist the contents of the outputs/${output_base}/
  // directories to disk after every build. Enabling this option is
  // useful when bb_clientd is restarted frequently.
  OutputPathPersistencyConfiguration output_path_persistency = 8;

  // When set, retry file system operations that failed with gRPC status
  // codes INTERNAL, UNAVAILABLE or UNKNOWN. The duration specifies the
  // maximum delay that may be caused by performing these retries.
  google.protobuf.Duration maximum_fuse_retry_delay = 9;

  // If set, cache REv2 Directory objects in memory. These objects need
  // to be loaded from the Content Addressable Storage when accessed
  // through "cas", but also when instantiated under "outputs".
  buildbarn.configuration.cas.CachingDirectoryFetcherConfiguration
      directory_cache = 10;
}

message OutputPathPersistencyConfiguration {
  // The directory where the contents of the outputs/${output_base}/
  // directories are persisted. For each directory
  // outputs/${output_base}/ a file named ${output_base} is stored in
  // the state directory.
  string state_directory_path = 1;

  // The maximum size in bytes of a state file that bb_clientd is
  // willing to reload at the start of a build. Memory usage of an
  // output path that is reloaded from disk is proportial to the size of
  // the state file.
  //
  // Recommended value: 1 GiB.
  int64 maximum_state_file_size_bytes = 2;

  // The maximum age of the state file that bb_clientd is willing to
  // reload at the start of a build. The age of the state file is
  // preserved across incremental builds, meaning it corresponds to the
  // last time a build was started with an empty output path (e.g.,
  // because "bazel clean" was run).
  //
  // This option exists to ensure that historical outputs of builds
  // (i.e., ones that correspond to targets that no longer exist in your
  // project) don't remain part of the output path indefinitely. That
  // would put excessive load on the remote execution service, as
  // FindMissingBlobs() is called on every file at the start of ever
  // build, making it harder to garbage collect these outputs.
  //
  // This option effectively controls how frequently bb_clientd should
  // do an implicit "bazel clean" on an output path.
  //
  // TODO: This option is only respected when running the initial build
  // for an output path after restarting bb_clientd. Should we also
  // purge data in the output path, even if bb_clientd doesn't get
  // restarted?
  google.protobuf.Duration maximum_state_file_age = 3;

  // For every file in the output path, the state file stores an entry
  // that contains a digest of the file's contents. The actual file
  // contents are not stored. This means that upon restart, only files
  // that are also present in the Content Addressable Storage (CAS) can
  // be restored. As files generated by "no-remote" actions are not
  // stored, those would get lost.
  //
  // When set to a value greater than zero, this option enables an
  // upload pass that is triggered at the end of every build, causing
  // any files that are only present locally to be uploaded. This
  // ensures that the entire contents of the output path can be
  // restored. The value denotes the maximum number of concurrent writes
  // to issue against the CAS.
  int64 local_file_upload_concurrency = 4;
}
